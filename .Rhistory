stripchart(list(df19$sens, df20$sens,df21$sens, df18$sens), vertical=T, pch=19, col=rgb(0,0,0,0.2), method='jitter',xlab="Sample Size", ylab="Sensitivity",main="Comparison of Sensitivity of Tools with Only Scale",group.names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
boxplot(df19$sens, df20$sens, df21$sens, df18$sens, add=T, col=rgb(0,0,0,0),names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
dev.off()
load(file="output/aldex.test.results.w20V2.Rda")
load(file="output/aldex.test.results.w50V2.Rda")
load(file="output/n20wil.Rda")
load(file="output/n50wilc.Rda")
#ALDEx2 effect, wi.eBH, we.eBH, and DESeq2 for location present and with location not present
df4<-data.frame(aldex.test.results.20)
df16<-data.frame(aldex.test.results.t20)
df17<-data.frame(aldex.test.wilc20)
df18<-data.frame(deseq2.test.results20)
df19<-data.frame(aldex.test.results.0.5.20)
df20<-data.frame(aldex.test.results.t200)
df21<-data.frame(aldex.test.results.w208)
pdf(file="updatedspecpanelwith4tools.pdf",width=14,height=8)
par(mfrow= c(1,2))
stripchart(list(1-df4$spec, 1-df16$spec,1-df17$spec), vertical=T, pch=19, col=rgb(0,0,0,0.2), method='jitter',xlab="Tool", ylab="Specificity",group.names=c("Effect-Size","t-test","Wilcoxon"), main="Comparison of Specificity of Tools with Location and Scale")
boxplot(1-df4$spec, 1-df16$spec, 1-df17$spec, 1-df18$spec, add=T, col=rgb(0,0,0,0),names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
stripchart(list(1-df19$spec, 1-df20$spec,1-df21$spec, 1-df18$spec), vertical=T, pch=19, col=rgb(0,0,0,0.2), method='jitter',xlab="Tool", ylab="Specificity",group.names=c("Effect-Size","t-test","Wilcoxon","DESeq2"),main="Comparison of Specificity of Tools Without Location")
boxplot(1-df19$spec, 1-df20$spec, 1-df21$spec, 1-df18$spec, add=T, col=rgb(0,0,0,0),names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
dev.off()
pdf(file="updatedsenspanelwith4tools.pdf",width=14,height=8)
par(mfrow= c(1,2))
stripchart(list(df4$sens, df16$sens,df17$sens), vertical=T, pch=19, col=rgb(0,0,0,0.2), method='jitter',xlab="Sample Size", ylab="Sensitivity",group.names=c("Effect-Size","t-test","Wilcoxon"),main="Comparison of Sensitivity of Tools with Location and Scale")
boxplot(df4$sens, df16$sens,df17$sens, df18$sens, add=T, col=rgb(0,0,0,0),names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
stripchart(list(df19$sens, df20$sens,df21$sens, df18$sens), vertical=T, pch=19, col=rgb(0,0,0,0.2), method='jitter',xlab="Sample Size", ylab="Sensitivity",main="Comparison of Sensitivity of Tools without Location",group.names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
boxplot(df19$sens, df20$sens, df21$sens, df18$sens, add=T, col=rgb(0,0,0,0),names=c("Effect-Size","t-test","Wilcoxon","DESeq2"))
dev.off()
summary(aldex.test.results.20)
#loading the appropriate libraries and datasets
library(DESeq2,quietly=T)
library(ALDEx2,quietly=T)
load("~/Documents/github/3383-Project/data/virginia.groups.Rda") #load Health v BV grouping vector for all 297 metatranscriptome samples
load("~/Documents/github/3383-Project/data/ko.virginia.filt.Rda") #load KO aggregated FILTERED feature table
#mu=0.15 and gamma = 0.5, effect size
load(file="output/aldex.mu0.15.3.Rda")
load(file="output/aldex.mu0.15.5.Rda")
load(file="output/aldex.mu0.15.10.Rda")
load(file="output/aldex.mu0.15.20.Rda")
load(file="output/aldex.mu0.15.50v2.Rda")
#gamma=0.5, effect size
load(file="output/aldex.g0.5.3.Rda")
load(file="output/aldex.g0.5.5.Rda")
load(file="output/aldex.g0.5.10.Rda")
load(file="output/aldex.g0.5.20.Rda")
load(file="output/aldex.g0.5.50.Rda")
#gamma=1, effect size
load(file="output/aldex.g.1.3.Rda")
load(file="output/aldex.g.1.5.Rda")
load(file="output/aldex.g.1.10.Rda")
load(file="output/aldex.g.1.20.Rda")
#gamma=0.5, we.eBH
load(file="output/aldex.test.results.t0.Rda")
load(file="output/aldex.test.results.t05.Rda")
load(file="output/aldex.test.results.t100.Rda")
load(file="output/aldex.test.results.t200.Rda")
load(file="output/aldex.test.results.t500.Rda")
#gamma=0.5, mu=0.15, we.eBH
load(file="output/aldex.test.results.t.Rda")
load(file="output/aldex.test.results.t5.Rda")
load(file="output/aldex.test.results.t10.Rda")
load(file="output/aldex.test.results.t20.Rda")
load(file="output/aldex.test.results.t50.Rda")
#gamma=1, we.eBH
load(file="output/aldex.test.results.t06.Rda")
load(file="output/aldex.test.results.t56.Rda")
load(file="output/aldex.test.results.t106.Rda")
load(file="output/aldex.test.results.t206.Rda")
load(file="output/aldex.test.results.t506.Rda")
#gamma=0.5, wi.eBH
load(file="output/aldex.test.results.w03.Rda")
load(file="output/aldex.test.results.w58.Rda")
load(file="output/aldex.test.results.w108.Rda")
load(file="output/aldex.test.results.w208.Rda")
load(file="output/aldex.test.results.w508.Rda")
#gamma 0.5, mu=0.15, wi.eBH
load(file="output/aldex.test.results.w.Rda")
load(file="output/aldex.test.results.w5.Rda")
load(file="output/aldex.test.results.w10.Rda")
#gamma=1, wi.eBH
load(file="output/aldex.test.results.w039.Rda")
load(file="output/aldex.test.results.w59.Rda")
load(file="output/aldex.test.results.w109.Rda")
load(file="output/aldex.test.results.w209.Rda")
load(file="output/aldex.test.results.w509.Rda")
#DESeq2
load(file="output/deseq2.test.results3.Rda")
load(file="output/deseq2.test.results5.Rda")
load(file="output/deseq2.test.results10.Rda")
load(file="output/deseq2.test.results20.Rda")
load(file="output/deseq2.test.results50.Rda")
load(file="output/aldexwilc20.Rda")
df4<-data.frame(aldex.test.results.20)
summary(aldex.test.results.20)
1-spec$aldex.test.results.20
1-aldex.test.results.20$spec
1-df4$spec
summary(1-df4$spec)
df19<-data.frame(aldex.test.results.0.5.20)
summary(1-df19$spec)
?IQE
?IQE
IQR(1-df$spec)
getwd()
load(file="Vitamin C Lab for r")
load(file="Vitamin C Lab for r.xlxs")
load(file="/Users/andreeamurariu/Vitamin C Lab for r.xlxs")
library(readxl)
Vitamin_C_Lab_for_r <- read_excel("Vitamin C Lab for r.xlsx",
range = "E45:G50")
View(Vitamin_C_Lab_for_r)
t.test("ORIGINAL CONC", "new conc",
alternative = c("greater"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95, ...)
t.test("ORIGINAL CONC", "new conc",
alternative = c("greater"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
data.frame("ORIGINAL CONC","new conc")
sessionInfo()
library(edgeR)
library(DESeq2)
BiocManager::install("SummarizedExperiment")
BiocManager::install("SummarizedExperiment", force=TRUE)
library(DESeq2)
library(seqgendiff)
setwd("/Users/andreeamurariu/Documents/github/usri/")
library(edgeR,quietly=T)
library(DESeq2,quietly=T)
library(seqgendiff,quietly=T)
readCount<-read.table(file="data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv", header = T, skip=35, sep='\t', row.names = 1,)
keep
setwd("/Users/andreeamurariu/Documents/github/usri/")
immuno<-read.table(file="data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv", header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file="data/metadata.txt", header=F, row.names=1, sep='\t')
setwd("/Users/andreeamurariu/Documents/github/usri/")
immuno<-read.table(file="data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv", header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file="data/metadata.txt", header=F, row.names=1, sep='\t')
m <- read.table(file="data/imm_metadata.txt", header=F, row.names=1, sep='\t')
setwd("/Users/andreeamurariu/Documents/github/usri/")
immuno<-read.table(file="data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv", header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file="data/imm_metadata.txt", header=F, row.names=1, sep='\t')
##stopped editing here, start here
if(file.exists("analysis/thin_sim_data.out.Rda")){
load("analysis/thin_sim_data.out.Rda") # file is data.out, list
} else {
library(ALDEx2, warn.conflicts=F)
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
}
BiocManager::install(aldex2)
BiocManager::install("aldex2")
BiocManager::install("ALDEx2")
view(thin.immuno)
conditions <- rep("Pre", 109)
conditions[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions)
immuno.conds
y <- DGEList(counts=immuno, group=factor(conditions))
keep <- filterByExpr(y)
y <- y[keep,keep.lib.sizes=FALSE]
y
immuno.data <- y$counts
immuno.data
data.out <- list()
data.out
for(i in 1:10){
# this adds rnorm noise to 5% of the transcripts
# setting alpha=1 gives no difference between if features are
# approximately gaussian
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
#x <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=1e-3)
#x.2 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.2)
#x.5 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.5)
conds <- as.vector(thin.immuno$designmat)
#DESeq2 functions
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(conds),
design = ~ conds)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)
data.iter <- list(coef=thin.immuno$coefmat, ald0=x, ald2=x.2, ald5=x.5, des=res.th)
data.out[[i]] <- data.iter
}
BiocManager::install(version='devel')
for(i in 1:10){
# this adds rnorm noise to 5% of the transcripts
# setting alpha=1 gives no difference between if features are
# approximately gaussian
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
#x <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=1e-3)
#x.2 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.2)
#x.5 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.5)
conds <- as.vector(thin.immuno$designmat)
#DESeq2 functions
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(conds),
design = ~ conds)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)
data.iter <- list(coef=thin.immuno$coefmat, ald0=x, ald2=x.2, ald5=x.5, des=res.th)
data.out[[i]] <- data.iter
}
if(file.exists("analysis/thin_sim_data.out.Rda")){
load("analysis/thin_sim_data.out.Rda") # file is data.out, list
} else {
library(ALDEx2, warn.conflicts=F)
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
###
# edgeR functions
conditions <- rep("Pre", 109)
conditions[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions)
y <- DGEList(counts=immuno, group=factor(conditions))
keep <- filterByExpr(y)
y <- y[keep,keep.lib.sizes=FALSE]
# make the filtered base dataset, filters out genes with no expr
immuno.data <- y$counts
data.out <- list()
# do 10 replicates and keep outputs
for(i in 1:10){
# this adds rnorm noise to 5% of the transcripts
# setting alpha=1 gives no difference between if features are
# approximately gaussian
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
x <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=1e-3)
x.2 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.2)
x.5 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.5)
conds <- as.vector(thin.immuno$designmat)
#DESeq2 functions
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(conds),
design = ~ conds)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)
data.iter <- list(coef=thin.immuno$coefmat, ald0=x, ald2=x.2, ald5=x.5, des=res.th)
data.out[[i]] <- data.iter
}
save(data.out, file="../analysis/thin_sim_data_draft.out.Rda")
}
setwd("/Users/andreeamurariu/Documents/github/usri/")
setwd("/home/amurariu/usri")
if(file.exists("analysis/thin_sim_data.out.Rda")){
load("analysis/thin_sim_data.out.Rda") # file is data.out, list
} else {
library(ALDEx2, warn.conflicts=F)
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
###
# edgeR functions
conditions <- rep("Pre", 109)
conditions[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions)
y <- DGEList(counts=immuno, group=factor(conditions))
keep <- filterByExpr(y)
y <- y[keep,keep.lib.sizes=FALSE]
# make the filtered base dataset, filters out genes with no expr
immuno.data <- y$counts
data.out <- list()
# do 10 replicates and keep outputs
for(i in 1:10){
# this adds rnorm noise to 5% of the transcripts
# setting alpha=1 gives no difference between if features are
# approximately gaussian
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
#x <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=1e-3)
# x.2 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.2)
#x.5 <- aldex(thin.immuno$mat, conditions=as.vector(thin.immuno$designmat), gamma=0.5)
conds <- as.vector(thin.immuno$designmat)
#DESeq2 functions
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(conds),
design = ~ conds)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)
#data.iter <- list(coef=thin.immuno$coefmat, ald0=x, ald2=x.2, ald5=x.5, des=res.th)
#data.out[[i]] <- data.iter
}
#save(data.out, file="../analysis/thin_sim_data_draft.out.Rda")
}
res.th
setClassUnion("ExpData", c("matrix", "SummarizedExperiment"))
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(conds),
design = ~ conds)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)
res.th
DESeq2::plotMA(res.th)
y <- calcNormFactors(y)
count_norm = cpm(y)
design <- model.matrix(~immuno.conds)
immuno.conds$condition <- factor(immuno.conds$conditions)
y <- calcNormFactors(y)
count_norm = cpm(y)
design <- model.matrix(~immuno.conds)
immuno.conds$condition <- factor(immuno.conds$conditions)
design <- model.matrix(~immuno.conds)
y <- calcNormFactors(y)
count_norm = cpm(y)
y <- estimateDisp(y,design)
design <- model.matrix(~immuno.conds)
immuno.conds$condition <- factor(immuno.conds$conditions)
immuno.conds$conditions <- factor(immuno.conds$conditions)
immuno.conds$conditions
design
design <- model.matrix(~immuno.conds)
design <- model.matrix(~immuno.conds)
str(y)
?topTags
names(y)
dim(y$samples)
dim(y$counts)
dim(y$counts)[1]
ReadCount <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
meta <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm_metadata.txt"
immuno<-read.table(file=ReadCount, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
meta <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm_metadata.txt"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
url <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
meta <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm_metadata.txt"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://rawgithubusercontent.com/amurariu/usri/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
url <- 'https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- 'https://rawgithubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://rawgithubusercontent.com/amurariu/usri/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url<- "https://raw.githubusercontent.com/ggloor/datasets/main/transcriptome.tsv"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- "https://raw.githubusercontent.com/amurariu/usri/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv"
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
url <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
immuno<-read.table(file=url, header = T, skip=35, sep='\t', row.names = 1)
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
immuno.data
data.out
condsp
immuno.data
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
conditions <- rep("Pre", 109)
conditions[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions)
y <- DGEList(counts=immuno, group=factor(conditions))
keep <- filterByExpr(y)
y <- y[keep,keep.lib.sizes=FALSE]
# make the filtered base dataset
immuno.data <- y$counts
data.out <- list()
condsu<- as.vector(immuno.data)
for (i in 1:10){
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(condsu),
design = ~ condsu)
dds.u <- DESeq(dds.u)
res.u <- results(dds.u)}
dim(immuno.data)
dim(condsu)
thin.immuno
thin.immuno$designmat
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(immuno.conds),
design = ~ immuno.conds)
immuno.conds
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(immuno.conds$conditions),
design = ~ immuno.conds)
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(immuno.conds$conditions),
design = ~ immuno.conds$conditions)
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(immuno.conds),
design = ~ conditions)
for (i in 1:10){
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = data.frame(immuno.conds),
design = ~ conditions)
dds.u <- DESeq(dds.u)
res.u <- results(dds.u)}
res.u
DESeq2::plotMA(res.u)
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = immuno.conds,
design = ~ conditions)
dds.u <- DESeq(dds.u)
res.u <- results(dds.u)}
for (i in 1:10){
dds.u  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = immuno.conds,
design = ~ conditions)
dds.u <- DESeq(dds.u)
res.u <- results(dds.u)}
res.u
DESeq2::plotMA(res.u)
for(i in 1:10){
# this adds rnorm noise to 5% of the transcripts
# setting alpha=1 gives no difference between if features are
# approximately gaussian
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
condsp <- as.vector(thin.immuno$designmat)
setClassUnion("ExpData", c("matrix", "SummarizedExperiment")) #added due to error message being shown for DESeq2
dds.th  <- DESeqDataSetFromMatrix(countData = thin.immuno$mat,
colData = data.frame(condsp),
design = ~ condsp)
dds.th <- DESeq(dds.th)
res.th <- results(dds.th)}
DESeq2::plotMA(res.th)
res.th
immuno.conds$conditions <- factor(immuno.conds$conditions)
design <- model.matrix(~group)
y <- DGEList(counts=immuno, group=factor(conditions))
keep <- filterByExpr(y)
y <- y[keep,keep.lib.sizes=FALSE]
# make the filtered base dataset
immuno.data <- y$counts
data.out <- list()
design <- model.matrix(~group)
group<-factor(conditions
design <- model.matrix(~group)
group<-factor(conditions)
design <- model.matrix(~group)
immuno.conds$conditions <- factor(immuno.conds$conditions)
group<-factor(conditions)
design <- model.matrix(~group)
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
topTags(qlf)
discovery = rownames(qlf)
discovery
?topTags
dim(qlf)
topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)
edgeR.res.p<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
edgeR.res.p<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)
edgeR.res.p
?glmQLFit
for (i in 1:10){
thin.immunoe_e <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2)) #confirm if want to use the same thin.immuno group or no
cond_e <- as.vector(thin.immuno_e$designmat)
group<-factor(cond_e)
design <- model.matrix(~group)
fit <- glmQLFit(thin.immunoe_e,design)
qlf <- glmQLFTest(fit,coef=2)
edgeR.res.p<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
for (i in 1:10){
thin.immuno_e <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2)) #confirm if want to use the same thin.immuno group or no
cond_e <- as.vector(thin.immuno_e$designmat)
group<-factor(cond_e)
design <- model.matrix(~group)
fit <- glmQLFit(thin.immuno_e,design)
qlf <- glmQLFTest(fit,coef=2)
edgeR.res.p<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
thin.immuno_e <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
thin.immuno_e
cond_e <- as.vector(thin.immuno_e$designmat)
cond_e
group<-factor(cond_e)
group
for (i in 1:10){
thin.immuno_e <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2)) #confirm if want to use the same thin.immuno group or no
cond_e <- as.vector(thin.immuno_e$designmat)
group_e<-factor(cond_e)
design_e <- model.matrix(~group_e)
fit <- glmQLFit(thin.immuno_e,design_e)
qlf <- glmQLFTest(fit,coef=2)
edgeR.res.p<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
group_e<-factor(cond_e)
group_e
design_e <- model.matrix(~group_e)
design_e
fit <- glmQLFit(thin.immuno_e,design_e)
for (i in 1:10){
group<-factor(conditions)
design <- model.matrix(~group)
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
edgeR.res.u<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
for (i in 1:10){
group<-factor(conditions)
design <- model.matrix(~group)
fit <- glmQLFit(y,design)
qlf <- glmQLFTest(fit,coef=2)
edgeR.res.u<-topTags(qlf, n=20478, adjust.method = "BH", sort.by = "none", p.value = 1)}
edgeR.res.u
