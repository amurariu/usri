#randomized with FP addition BRCA
dds.thb  <- DESeqDataSetFromMatrix(countData = thin.brca$mat, #data that includes TP
colData = data.frame(condsb),
design = ~ condsb)
dds.thb <- DESeq(dds.thb)
res.thb <- results(dds.thb)
}
#unpermuted datasets
#unpermuted PD1
dds.up  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = immuno.conds,
design = ~ conditions_p)
dds.up <- DESeq(dds.up)
res.up <- results(dds.up)
#unpermuted BRCA
dds.ub  <- DESeqDataSetFromMatrix(countData = brca.data,
colData = brca.conds,
design = ~ conditions_b)
dds.ub <- DESeq(dds.ub)
res.ub <- results(dds.ub)
#PD1 save file
resup<-list(desu=res.up)
immuno.data.out.u <- list(desup)
#PD1 save file
resup<-list(desu=res.up)
immuno.data.out.u <- list(resup)
save(immuno.data.out.u, file="./Documents/github/usri/analysis/immuno.data.u.deseq.Rda")
resrp<-list(desr=res.rp)
immuno.data.out.r <- list(resrp)
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.deseq.Rda")
respp<-list(desp=res.thp)
immuno.data.out.p <- list(respp)
save(immuno.data.out.p, file="./Documents/github/usri/analysis/immuno.data.p.deseq.Rda")
#BRCA save file
resub<-list(desu=res.ub)
brca.data.out.u <- list(resub)
save(brca.data.out.u, file="./Documents/github/usri/analysis/brca.data.u.deseq.Rda")
resrb<-list(desr=res.rb)
brca.data.out.r <- list(resrb)
save(brca.data.out.r, file="./Documents/github/usri/analysis/brca.data.r.deseq.Rda")
respb<-list(desp=res.thb)
brca.data.out.p <- list(respb)
save(brca.data.out.p, file="./Documents/github/usri/analysis/brca.data.p.deseq.Rda")
#start analysis from here
#PD1 save file
resup<-list(resu=res.up)
immuno.data.out.u <- list(resup)
save(immuno.data.out.u, file="./Documents/github/usri/analysis/immuno.data.u.deseq.Rda")
resrp<-list(resr=res.rp)
immuno.data.out.r <- list(resrp)
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.deseq.Rda")
respp<-list(resp=res.thp)
immuno.data.out.p <- list(respp)
save(immuno.data.out.p, file="./Documents/github/usri/analysis/immuno.data.p.deseq.Rda")
#BRCA save file
resub<-list(resu=res.ub)
brca.data.out.u <- list(resub)
save(brca.data.out.u, file="./Documents/github/usri/analysis/brca.data.u.deseq.Rda")
resrb<-list(resr=res.rb)
brca.data.out.r <- list(resrb)
save(brca.data.out.r, file="./Documents/github/usri/analysis/brca.data.r.deseq.Rda")
respb<-list(resp=res.thb)
brca.data.out.p <- list(respb)
save(brca.data.out.p, file="./Documents/github/usri/analysis/brca.data.p.deseq.Rda")
#start analysis from here
library(ALDEx2, warn.conflicts=F)
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
#load datasets
#immuno/PD1 dataset loading
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
#establishing conditions for PD1
conditions_p <- rep("Pre", 109)
conditions_p[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions_p) #changed conditions to conditions_p to be consistent across datasets
#brca dataset loading
raw_counts<- "https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.normal-tumor.pair.rawCount.tsv"
con<-"https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.conditions.tsv"
brca <- read.table(file=raw_counts, header=T, row.names=1, sep='\t')
conditions_b <- as.vector(unlist(read.table(file=con, sep='\t'))) #changed from brca.conds to conditions_b
brca.conds <- data.frame(conditions_b) #changed from conditions to brca.conds for consistency with PD1 dataset
#insert additional datasets + conditions here:
#edgeR conditions for initial filtering
#PD1
y_pd1 <- DGEList(counts=immuno, group=factor(conditions_p))
keep_pd1 <- filterByExpr(y_pd1)
y_pd1 <- y_pd1[keep_pd1,keep.lib.sizes=FALSE]
immuno.data <- y_pd1$counts #filtered base dataset
immuno.data.out <- list() #check this, unsure of how this works
#brca
y_brca <- DGEList(counts=brca, group=factor(conditions_b))
keep_brca <- filterByExpr(y_brca)
y_brca <- y_brca[keep_brca,keep.lib.sizes=FALSE]
brca.data <- y_brca$counts #filtered base dataset
brca.data.out <- list() #check this, unsure of how this works
#repeat adding edgeR conditions for each new dataset
#for loop
for (i in 1:2){
#thin_2group adds rnorm noise to 5% of the transcripts, generates TPs in the dataset
#generate thin_2group for each dataset as well as labelling for conditions and new dataset
#PD1
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm,
signal_params = list(mean = 0, sd = 2))
condsp <- as.vector(thin.immuno$designmat)   # permuted and thinned conditions and data
datasp <- thin.immuno$mat
#BRCA
thin.brca <- thin_2group(brca.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
condsb <- as.vector(thin.brca$designmat)  # permuted and thinned conditions and data
datasb <- thin.brca$mat #changed these from conds and datasp to condsb and datasb for consistency
#edgeR analysis
#PD1 setup
group_p <- factor(condsp)
design_p <- model.matrix(~group_p) #use data randomization from seqgendiff
#randomized without FP addition PD1
fit_rp <- glmQLFit(immuno.data,design_p) #uses original data (ie. no TP added)
qlf_rp <- glmQLFTest(fit_rp,coef=2)
edg.rp<-topTags(qlf_rp, n=nrow(immuno.data), adjust.method = "BH", sort.by = "none", p.value = 1)
#randomized with FP addition PD1
fit_pp <- glmQLFit(datasp,design_p)
qlf_pp <- glmQLFTest(fit_pp,coef=2)
edg.pp<-topTags(qlf_pp, n=nrow(datasp), adjust.method = "BH", sort.by = "none", p.value = 1)
#BRCA setup
group_b <- factor(condsb)
design_b <- model.matrix(~group_b) #use data randomization from seqgendiff
#randomized without FP addition BRCA
fit_rb <- glmQLFit(brca.data,design_b) #uses original data (ie. no TP added)
qlf_rb <- glmQLFTest(fit_rb,coef=2)
edg.rb<-topTags(qlf_rb, n=nrow(brca.data), adjust.method = "BH", sort.by = "none", p.value = 1)
#randomized with FP addition BRCA
fit_pb <- glmQLFit(datasb,design_b) #data with TPs
qlf_pb <- glmQLFTest(fit_pb,coef=2)
edg.pb<-topTags(qlf_pb, n=nrow(datasb), adjust.method = "BH", sort.by = "none", p.value = 1)
#add code to save these each as separate files
}
#unpermuted PD1
group_up<-factor(conditions_p)
design_up <- model.matrix(~group_up)
fit_up <- glmQLFit(y_pd1,design_up)
qlf_up <- glmQLFTest(fit_up,coef=2)
edg.up<-topTags(qlf_up, n=nrow(immuno.data), adjust.method = "BH", sort.by = "none", p.value = 1)
#unpermuted BRCA
group_ub<-factor(conditions_b)
design_ub <- model.matrix(~group_ub)
fit_ub <- glmQLFit(y_brca,design_ub)
qlf_ub <- glmQLFTest(fit_ub,coef=2)
edg.ub<-topTags(qlf_ub, n=nrow(brca.data), adjust.method = "BH", sort.by = "none", p.value = 1)
#saving file
#PD1 save file
resup<-list(resu=edg.up)
immuno.data.out.u <- list(resup)
save(immuno.data.out.u, file="./Documents/github/usri/analysis/immuno.data.u.edger.Rda")
resrp<-list(resr=edg.rp)
immuno.data.out.r <- list(resrp)
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.edger.Rda")
respp<-list(resp=edg.pp)
immuno.data.out.p <- list(respp)
save(immuno.data.out.p, file="./Documents/github/usri/analysis/immuno.data.p.edger.Rda")
#BRCA save file
resub<-list(resu=edg.ub)
brca.data.out.u <- list(resub)
save(brca.data.out.u, file="./Documents/github/usri/analysis/brca.data.u.edger.Rda")
resrb<-list(resr=edg.rb)
brca.data.out.r <- list(resrb)
save(brca.data.out.r, file="./Documents/github/usri/analysis/brca.data.r.edger.Rda")
respb<-list(resp=edg.pb)
brca.data.out.p <- list(respb)
save(brca.data.out.p, file="./Documents/github/usri/analysis/brca.data.p.edger.Rda")
getwd()
resrp<-list(resr=res.rp)
immuno.data.out.r[[i]] <- resrp
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.deseq.Rda")
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
#load datasets
#immuno/PD1 dataset loading
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
#establishing conditions for PD1
conditions_p <- rep("Pre", 109)
conditions_p[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions_p) #changed conditions to conditions_p to be consistent across datasets
#brca dataset loading
raw_counts<- "https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.normal-tumor.pair.rawCount.tsv"
con<-"https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.conditions.tsv"
brca <- read.table(file=raw_counts, header=T, row.names=1, sep='\t')
conditions_b <- as.vector(unlist(read.table(file=con, sep='\t'))) #changed from brca.conds to conditions_b
brca.conds <- data.frame(conditions_b) #changed from conditions to brca.conds for consistency with PD1 dataset
#insert additional datasets + conditions here:
#edgeR conditions for initial filtering
#PD1
y_pd1 <- DGEList(counts=immuno, group=factor(conditions_p))
keep_pd1 <- filterByExpr(y_pd1)
y_pd1 <- y_pd1[keep_pd1,keep.lib.sizes=FALSE]
immuno.data <- y_pd1$counts #filtered base dataset
imumuno.data.out.u <- list()
imumuno.data.out.r <- list()
imumuno.data.out.p <- list()
#brca
y_brca <- DGEList(counts=brca, group=factor(conditions_b))
keep_brca <- filterByExpr(y_brca)
y_brca <- y_brca[keep_brca,keep.lib.sizes=FALSE]
brca.data <- y_brca$counts #filtered base dataset
brca.data.out.u <- list()
brca.data.out.r <- list()
brca.data.out.p <- list()
#repeat adding edgeR conditions for each new dataset
#for loop
for (i in 1:2){
#thin_2group adds rnorm noise to 5% of the transcripts, generates TPs in the dataset
#generate thin_2group for each dataset as well as labelling for conditions and new dataset
#PD1
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm,
signal_params = list(mean = 0, sd = 2))
condsp <- as.vector(thin.immuno$designmat)   # permuted and thinned conditions and data
datasp <- thin.immuno$mat
#BRCA
thin.brca <- thin_2group(brca.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
condsb <- as.vector(thin.brca$designmat)  # permuted and thinned conditions and data
datasb <- thin.brca$mat #changed these from conds and datasp to condsb and datasb for consistency
#DESeq2 analysis
#randomized without FP addition PD1
dds.rp  <- DESeqDataSetFromMatrix(countData = immuno.data,  #uses original data (no TP added)
colData = data.frame(condsp), #uses data randomization order from thin.immuno
design = ~ condsp)
dds.rp <- DESeq(dds.rp)
res.rp <- results(dds.rp)
resrp<-list(resr=res.rp)
immuno.data.out.r[[i]] <- resrp #added [[i]] and referenced list in line prior
#randomized with FP addition PD1
dds.thp  <- DESeqDataSetFromMatrix(countData = datasp,
colData = data.frame(condsp),
design = ~ condsp)
dds.thp <- DESeq(dds.thp)
res.thp <- results(dds.thp)
respp<-list(resp=res.thp)
immuno.data.out.p[[i]] <- respp
#randomized without FP addition BRCA
dds.rb  <- DESeqDataSetFromMatrix(countData = brca.data,  #uses original data (no TP added)
colData = data.frame(condsb), #uses data randomization order from thin.brca
design = ~ condsb)
dds.rb <- DESeq(dds.rb)
res.rb <- results(dds.rb)
resrb<-list(resr=res.rb)
brca.data.out.r[[i]] <- resrb
#randomized with FP addition BRCA
dds.thb  <- DESeqDataSetFromMatrix(countData = thin.brca$mat, #data that includes TP
colData = data.frame(condsb),
design = ~ condsb)
dds.thb <- DESeq(dds.thb)
res.thb <- results(dds.thb)
respb<-list(resp=res.thb)
brca.data.out.p[[i]] <- respb
#save files
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.deseq.Rda")
save(immuno.data.out.p, file="./Documents/github/usri/analysis/immuno.data.p.deseq.Rda")
save(brca.data.out.r, file="./Documents/github/usri/analysis/brca.data.r.deseq.Rda")
save(brca.data.out.p, file="./Documents/github/usri/analysis/brca.data.p.deseq.Rda")
}
#unpermuted datasets
#unpermuted PD1
dds.up  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = immuno.conds,
design = ~ conditions_p)
dds.up <- DESeq(dds.up)
res.up <- results(dds.up)
resup<-list(resu=res.up)
immuno.data.out.u <- list(resup)
save(immuno.data.out.u, file="./Documents/github/usri/analysis/immuno.data.u.deseq.Rda")
#unpermuted BRCA
dds.ub  <- DESeqDataSetFromMatrix(countData = brca.data,
colData = brca.conds,
design = ~ conditions_b)
dds.ub <- DESeq(dds.ub)
res.ub <- results(dds.ub)
#BRCA save file
resub<-list(resu=res.ub)
brca.data.out.u <- list(resub)
save(brca.data.out.u, file="./Documents/github/usri/analysis/brca.data.u.deseq.Rda")
brca.data.out.p
library(ALDEx2, warn.conflicts=F)
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
#load datasets
#immuno/PD1 dataset loading
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
#establishing conditions for PD1
conditions_p <- rep("Pre", 109)
conditions_p[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions_p) #changed conditions to conditions_p to be consistent across datasets
#brca dataset loading
raw_counts<- "https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.normal-tumor.pair.rawCount.tsv"
con<-"https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.conditions.tsv"
brca <- read.table(file=raw_counts, header=T, row.names=1, sep='\t')
conditions_b <- as.vector(unlist(read.table(file=con, sep='\t'))) #changed from brca.conds to conditions_b
brca.conds <- data.frame(conditions_b) #changed from conditions to brca.conds for consistency with PD1 dataset
#insert additional datasets + conditions here:
#edgeR conditions for initial filtering
#PD1
y_pd1 <- DGEList(counts=immuno, group=factor(conditions_p))
keep_pd1 <- filterByExpr(y_pd1)
y_pd1 <- y_pd1[keep_pd1,keep.lib.sizes=FALSE]
immuno.data <- y_pd1$counts #filtered base dataset
immuno.data.out <- list() #check this, unsure of how this works
#brca
y_brca <- DGEList(counts=brca, group=factor(conditions_b))
keep_brca <- filterByExpr(y_brca)
y_brca <- y_brca[keep_brca,keep.lib.sizes=FALSE]
brca.data <- y_brca$counts #filtered base dataset
brca.data.out <- list() #check this, unsure of how this works
#repeat adding edgeR conditions for each new dataset
#for loop
for (i in 1:2){
#thin_2group adds rnorm noise to 5% of the transcripts, generates TPs in the dataset
#generate thin_2group for each dataset as well as labelling for conditions and new dataset
#PD1
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm,
signal_params = list(mean = 0, sd = 2))
condsp <- as.vector(thin.immuno$designmat)   # permuted and thinned conditions and data
datasp <- thin.immuno$mat
#BRCA
thin.brca <- thin_2group(brca.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
condsb <- as.vector(thin.brca$designmat)  # permuted and thinned conditions and data
datasb <- thin.brca$mat #changed these from conds and datasp to condsb and datasb for consistency
#edgeR analysis
#PD1 setup
group_p <- factor(condsp)
design_p <- model.matrix(~group_p) #use data randomization from seqgendiff
#randomized without FP addition PD1
fit_rp <- glmQLFit(immuno.data,design_p) #uses original data (ie. no TP added)
qlf_rp <- glmQLFTest(fit_rp,coef=2)
edg.rp<-topTags(qlf_rp, n=nrow(immuno.data), adjust.method = "BH", sort.by = "none", p.value = 1)
resrp<-list(resu=edg.rp)
immuno.data.out.r[[i]] <- resrp
#randomized with FP addition PD1
fit_pp <- glmQLFit(datasp,design_p)
qlf_pp <- glmQLFTest(fit_pp,coef=2)
edg.pp<-topTags(qlf_pp, n=nrow(datasp), adjust.method = "BH", sort.by = "none", p.value = 1)
respp<-list(resu=edg.pp)
immuno.data.out.p[[i]] <- respp
#BRCA setup
group_b <- factor(condsb)
design_b <- model.matrix(~group_b) #use data randomization from seqgendiff
#randomized without FP addition BRCA
fit_rb <- glmQLFit(brca.data,design_b) #uses original data (ie. no TP added)
qlf_rb <- glmQLFTest(fit_rb,coef=2)
edg.rb<-topTags(qlf_rb, n=nrow(brca.data), adjust.method = "BH", sort.by = "none", p.value = 1)
resrb<-list(resu=edg.rb)
brca.data.out.r[[i]] <- resrb
#randomized with FP addition BRCA
fit_pb <- glmQLFit(datasb,design_b) #data with TPs
qlf_pb <- glmQLFTest(fit_pb,coef=2)
edg.pb<-topTags(qlf_pb, n=nrow(datasb), adjust.method = "BH", sort.by = "none", p.value = 1)
respb<-list(resu=edg.pb)
brca.data.out.p[[i]] <- respb
#add code to save these each as separate files
}
#unpermuted PD1
group_up<-factor(conditions_p)
design_up <- model.matrix(~group_up)
fit_up <- glmQLFit(y_pd1,design_up)
qlf_up <- glmQLFTest(fit_up,coef=2)
edg.up<-topTags(qlf_up, n=nrow(immuno.data), adjust.method = "BH", sort.by = "none", p.value = 1)
resup<-list(resu=edg.up)
immuno.data.out.u <- list(res.up)
#unpermuted BRCA
group_ub<-factor(conditions_b)
design_ub <- model.matrix(~group_ub)
fit_ub <- glmQLFit(y_brca,design_ub)
qlf_ub <- glmQLFTest(fit_ub,coef=2)
edg.ub<-topTags(qlf_ub, n=nrow(brca.data), adjust.method = "BH", sort.by = "none", p.value = 1)
resub<-list(resu=edg.ub)
brca.data.out.u <- list(resub)
#saving file
#PD1 save file
save(immuno.data.out.u, file="./Documents/github/usri/analysis/immuno.data.u.edger.Rda")
save(immuno.data.out.r, file="./Documents/github/usri/analysis/immuno.data.r.edger.Rda")
save(immuno.data.out.p, file="./Documents/github/usri/analysis/immuno.data.p.edger.Rda")
#BRCA save file
save(brca.data.out.u, file="./Documents/github/usri/analysis/brca.data.u.edger.Rda")
save(brca.data.out.r, file="./Documents/github/usri/analysis/brca.data.r.edger.Rda")
save(brca.data.out.p, file="./Documents/github/usri/analysis/brca.data.p.edger.Rda")
brca.data.out.r
setwd("~/Documents/github/usri")
library(seqgendiff, warn.conflicts=F)
library(edgeR, warn.conflicts=F)
library(DESeq2, warn.conflicts=F)
#load datasets
#immuno/PD1 dataset loading
raw_counts <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm-GSE91061_raw_counts_GRCh38.p13_NCBI.tsv'
meta <- 'https://raw.githubusercontent.com/amurariu/usri/main/data/imm_metadata.txt'
immuno<-read.table(file=raw_counts, header = T, skip=35, sep='\t', row.names = 1)
m <- read.table(file=meta, header=F, row.names=1, sep='\t')
#establishing conditions for PD1
conditions_p <- rep("Pre", 109)
conditions_p[grep("_On",m)] <- "On"
immuno.conds <- data.frame(conditions_p) #changed conditions to conditions_p to be consistent across datasets
#brca dataset loading
raw_counts<- "https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.normal-tumor.pair.rawCount.tsv"
con<-"https://raw.githubusercontent.com/amurariu/usri/main/data/TCGA-BRCA.conditions.tsv"
brca <- read.table(file=raw_counts, header=T, row.names=1, sep='\t')
conditions_b <- as.vector(unlist(read.table(file=con, sep='\t'))) #changed from brca.conds to conditions_b
brca.conds <- data.frame(conditions_b) #changed from conditions to brca.conds for consistency with PD1 dataset
#insert additional datasets + conditions here:
#edgeR conditions for initial filtering
#PD1
y_pd1 <- DGEList(counts=immuno, group=factor(conditions_p))
keep_pd1 <- filterByExpr(y_pd1)
y_pd1 <- y_pd1[keep_pd1,keep.lib.sizes=FALSE]
immuno.data <- y_pd1$counts #filtered base dataset
imumuno.data.out.u <- list()
imumuno.data.out.r <- list()
imumuno.data.out.p <- list()
#brca
y_brca <- DGEList(counts=brca, group=factor(conditions_b))
keep_brca <- filterByExpr(y_brca)
y_brca <- y_brca[keep_brca,keep.lib.sizes=FALSE]
brca.data <- y_brca$counts #filtered base dataset
brca.data.out.u <- list()
brca.data.out.r <- list()
brca.data.out.p <- list()
#repeat adding edgeR conditions for each new dataset
#for loop
for (i in 1:2){
#thin_2group adds rnorm noise to 5% of the transcripts, generates TPs in the dataset
#generate thin_2group for each dataset as well as labelling for conditions and new dataset
#PD1
thin.immuno <- thin_2group(immuno.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm,
signal_params = list(mean = 0, sd = 2))
condsp <- as.vector(thin.immuno$designmat)   # permuted and thinned conditions and data
datasp <- thin.immuno$mat
#BRCA
thin.brca <- thin_2group(brca.data, prop_null=0.95, alpha=0,
signal_fun = stats::rnorm, signal_params = list(mean = 0, sd = 2))
condsb <- as.vector(thin.brca$designmat)  # permuted and thinned conditions and data
datasb <- thin.brca$mat #changed these from conds and datasp to condsb and datasb for consistency
#DESeq2 analysis
#randomized without FP addition PD1
dds.rp  <- DESeqDataSetFromMatrix(countData = immuno.data,  #uses original data (no TP added)
colData = data.frame(condsp), #uses data randomization order from thin.immuno
design = ~ condsp)
dds.rp <- DESeq(dds.rp)
res.rp <- results(dds.rp)
resrp<-list(resr=res.rp)
immuno.data.out.r[[i]] <- resrp #added [[i]] and referenced list in line prior
#randomized with FP addition PD1
dds.thp  <- DESeqDataSetFromMatrix(countData = datasp,
colData = data.frame(condsp),
design = ~ condsp)
dds.thp <- DESeq(dds.thp)
res.thp <- results(dds.thp)
respp<-list(resp=res.thp)
immuno.data.out.p[[i]] <- respp
#randomized without FP addition BRCA
dds.rb  <- DESeqDataSetFromMatrix(countData = brca.data,  #uses original data (no TP added)
colData = data.frame(condsb), #uses data randomization order from thin.brca
design = ~ condsb)
dds.rb <- DESeq(dds.rb)
res.rb <- results(dds.rb)
resrb<-list(resr=res.rb)
brca.data.out.r[[i]] <- resrb
#randomized with FP addition BRCA
dds.thb  <- DESeqDataSetFromMatrix(countData = thin.brca$mat, #data that includes TP
colData = data.frame(condsb),
design = ~ condsb)
dds.thb <- DESeq(dds.thb)
res.thb <- results(dds.thb)
respb<-list(resp=res.thb)
brca.data.out.p[[i]] <- respb
#save files
save(immuno.data.out.r, file="./analysis/immuno.data.r.deseq.Rda")
save(immuno.data.out.p, file="./analysis/immuno.data.p.deseq.Rda")
save(brca.data.out.r, file="./analysis/brca.data.r.deseq.Rda")
save(brca.data.out.p, file="./analysis/brca.data.p.deseq.Rda")
}
#unpermuted datasets
#unpermuted PD1
dds.up  <- DESeqDataSetFromMatrix(countData = immuno.data,
colData = immuno.conds,
design = ~ conditions_p)
dds.up <- DESeq(dds.up)
res.up <- results(dds.up)
resup<-list(resu=res.up)
immuno.data.out.u <- list(resup)
save(immuno.data.out.u, file="./analysis/immuno.data.u.deseq.Rda")
#unpermuted BRCA
dds.ub  <- DESeqDataSetFromMatrix(countData = brca.data,
colData = brca.conds,
design = ~ conditions_b)
dds.ub <- DESeq(dds.ub)
res.ub <- results(dds.ub)
#BRCA save file
resub<-list(resu=res.ub)
brca.data.out.u <- list(resub)
save(brca.data.out.u, file="./analysis/brca.data.u.deseq.Rda")
